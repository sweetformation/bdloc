<?php

namespace Bdloc\AppBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;
use Symfony\Component\HttpFoundation\Request;

/**
 * BookRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BookRepository extends EntityRepository
{
    public function findBooksBySearch($page){

        //JE SAIS PAS CE QUE C'EST MAIS CA MARCHE !
        $qb = $this->createQueryBuilder('b');

        //if(){
        //$qb->where();
        //}
        
        //Jointure pour l'auteur
        $qb->join('b.illustrator', 'i');
        $qb->addSelect('i');        

        //Jointure pour le coloriste
        $qb->join('b.colorist', 'c');
        $qb->addSelect('c');        

        //Jointure pour le scénariste
        $qb->join('b.scenarist', 's');
        $qb->addSelect('s');

        //Jointure pour les catégories
        $qb->join('b.serie', 'cate');
        $qb->addSelect('cate');

        // $qb->setFirstResult(0)
        //     ->setMaxResults(30);

        // $query = $qb->getQuery();

        // $paginator = new Paginator($query);
        // return $paginator;
        
        // $page = 1;
        $nombreParPage = 20;

        //JE SAIS PAS CE QUE C'EST MAIS CA MARCHE !
        $request = Request::createFromGlobals();
        //JE SAIS PAS CE QUE C'EST MAIS CA MARCHE !
        $request->query->get('page');

        //JE SAIS PAS CE QUE C'EST MAIS CA MARCHE PAS !
        //$request->query->get('categorie');

        //AFFICHAGE AVEC LA PAGINATION pour le premier résultat
        $qb->setFirstResult(($page-1) * $nombreParPage)
        //LE NOMBRE DE POST PAR PAGE 
            ->setMaxResults($nombreParPage);
         
        return new Paginator($qb);


    }
}